
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  displayName    String
  password       String?
  email          String?
  isSSO          Boolean    
  isAdmin        Boolean @default(false)
  isSuperAdmin   Boolean @default(false)
  ownedExperiments  Experiment[]
  assayTypesAsTechnician AssayTypeForExperiment[]
}

model Experiment {
  id          Int         @id @default(autoincrement())
  title       String      @unique
  description String
  startDate  DateTime    @db.Date
  isCanceled  Boolean
  owner       User        @relation(fields: [ownerId], references: [id])
  ownerId     Int 
  conditions  Condition[]
  assays      Assay[] 
  assayTypes  AssayTypeForExperiment[]         
}

model Assay {
  id           Int        @id @default(autoincrement())
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int
  condition    Condition  @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  conditionId  Int
  assayType    AssayTypeForExperiment @relation(fields: [assayTypeId], references: [id], onDelete: Cascade)
  assayTypeId  Int
  result       AssayResult?

  week         Int
  @@unique([experimentId, conditionId, week, assayTypeId], name: "UniqueAssayTypePerWeekAndCondition")
}

model AssayResult {
  id          Int      @id @default(autoincrement())
  assay       Assay    @relation(fields: [assayId], references: [id])
  assayId     Int      @unique
  result      Float?
  comment     String?
  author      String
}

model AssayType {
  id          Int      @id @default(autoincrement())
  isCustom    Boolean
  name        String
  description String
  units       String?
  experimentSpecificTypes AssayTypeForExperiment[]
}

model AssayTypeForExperiment {
  id          Int      @id @default(autoincrement())
  assayType   AssayType @relation(fields: [assayTypeId], references: [id], onDelete: Cascade)
  assayTypeId Int
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int
  technician   User? @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  technicianId Int?
  assays       Assay[]

  @@unique([experimentId, assayTypeId], name: "UniqueAssayTypesPerExperiment")
}

model Condition {
  id           Int        @id @default(autoincrement())
  experiment   Experiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)
  experimentId Int
  name         String
  isControl      Boolean 
  assays        Assay[]

  @@unique([experimentId, name], name: "UniqueExperimentConditionName")
}

view AssayAgendaView {
  id            Int       @unique
  experimentId  Int
  targetDate    DateTime  @db.Date
  title         String
  owner         String
  technician    String?
  condition     String
  type          String
  week          Int
  resultId      Int?
}
